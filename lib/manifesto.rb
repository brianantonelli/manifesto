require 'digest/md5'
require 'find'

# Manifesto.cache(:directory => '/public', :checksum => false)

module Manifesto
  def self.cache(options = {})
    options[:directory] = './public' unless options.has_key?(:directory)
    # raise an ArgumentError if :directory is not a file path
    options[:checksum] = true unless options.has_key?(:checksum)
    # raise an ArgumentError if :checksum is not a boolean
    generate_manifest(options)
  end
  
  private
  def self.generate_manifest(options)
    manifest = []
    hashes = ''
    Find.find(options[:directory]) do |file|
    
      # Only include real files (i.e. not directories, symlinks etc.) and non-hidden
      # files in the manifest.
      if File.file?(file) && File.basename(file)[0,1] != '.'
        manifest << "#{file}\n"
      
        # Read the file contents to calculate the MD5 hash, so that if a file is
        # changed, the manifest is changed too.
        if options.has_key?(:checksum) && options[:checksum]
          digest = Digest::MD5.new
          File.open(file, 'r') do |f|
            digest.update(f.read(8192)) until f.eof
            hashes += digest.hexdigest
          end
        end
      end
    end
    
    # Hash the hashes of each file and output as a comment.
    if options.has_key?(:checksum) && options[:checksum]
      manifest << "# Hash: #{Digest::MD5.hexdigest(hashes)}\n"
    end
    manifest << "# Generated by manifesto (http://github.com/johntopley/manifesto)"
    manifest << "CACHE MANIFEST\n"
    manifest.reverse
  end
end